{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Mode","TaskStatus","sampleTasks","id","title","lastModified","Date","toLocaleString","completed","useState","open","setOpen","mode","setMode","setTitle","currentId","setCurrentTaskId","allTasks","setTasks","useEffect","tasks","localStorage","getItem","JSON","parse","reset","handleClose","markChecked","changeTaskStatus","status","_tasks","map","item","setItem","stringify","deleteTask","filter","i","editTask","task","showTodoList","isCompleted","sort","a","b","Grid","container","key","style","padding","xs","md","name","type","checked","onChange","onClick","Typography","textAlign","overflow","textOverflow","fontSize","display","justifyContent","marginTop","Tooltip","IconButton","color","Fragment","Container","fixed","marginBottom","Card","paddingTop","paddingBottom","maxHeight","overflowY","length","className","Button","variant","endIcon","Accordion","AccordionSummary","expandIcon","AccordionDetails","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","Input","autoFocus","label","fullWidth","value","e","target","DialogActions","uuidv4","newTasks","toString","disabled","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.484aa18a.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ControlPointIcon from '@material-ui/icons/ControlPoint';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DoneIcon from '@material-ui/icons/Done';\nimport CloseIcon from '@material-ui/icons/Close';\nimport EditIcon from '@material-ui/icons/Edit';\nimport Card from '@material-ui/core/Card';\nimport Input from \"@material-ui/core/Input\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport {v4 as uuidv4} from 'uuid';\nimport SettingsBackupRestoreIcon from '@material-ui/icons/SettingsBackupRestore';\n\nconst Mode = {\n    Create: 'create',\n    Edit: 'edit'\n}\n\nconst TaskStatus = {\n    Completed: 'completed',\n    Restore: 'restore'\n}\n\nconst sampleTasks = [\n    {\n        id: 'id',\n        title: 'Go to gym',\n        lastModified: new Date().toLocaleString(),\n        completed: false,\n    }\n]\n\nexport default () => {\n    const [open, setOpen] = useState(false);\n    const [mode, setMode] = useState(Mode.Create)\n    const [title, setTitle] = useState('');\n    const [currentId, setCurrentTaskId] = useState('x');\n    const [allTasks, setTasks] = useState(sampleTasks)\n\n    useEffect(() => {\n        const tasks = localStorage.getItem('tasks')\n        if (tasks === null) {\n            setTasks(sampleTasks)\n        } else {\n            setTasks(JSON.parse(tasks))\n        }\n    }, []);\n\n    const reset = () => {\n        setCurrentTaskId('x')\n        setTitle('')\n    }\n\n    const handleClose = () => {\n        setOpen(false);\n        if (mode === Mode.Edit) {\n            setMode(Mode.Create)\n        }\n        reset()\n    };\n\n    const markChecked = (id) => {\n        if (id === currentId) {\n            setCurrentTaskId('x')\n        } else {\n            setCurrentTaskId(id)\n        }\n    }\n\n    const changeTaskStatus = (id, status = TaskStatus.Restore) => {\n        const _tasks = allTasks.map(item => {\n            if (item.id === id) {\n                return {...item, completed: status === TaskStatus.Completed};\n            }\n            return item;\n        })\n        setTasks(_tasks)\n        setCurrentTaskId('x')\n        localStorage.setItem(\"tasks\", JSON.stringify(_tasks));\n    }\n\n    const deleteTask = (id) => {\n        let _tasks = allTasks.filter(i => i.id !== id)\n        setTasks(_tasks)\n        localStorage.setItem(\"tasks\", JSON.stringify(_tasks));\n    }\n\n    const editTask = (task) => {\n        setTitle(task.title)\n        setMode(Mode.Edit)\n        setOpen(true)\n    }\n\n    const addTask = () => {\n        let task = {\n            id: uuidv4(),\n            title: title,\n            lastModified: new Date().toLocaleString(),\n            completed: false,\n        }\n        const newTasks = [...allTasks, task]\n        setTasks(newTasks)\n        localStorage.setItem(\"tasks\", JSON.stringify(newTasks).toString());\n        handleClose()\n        reset()\n    }\n\n    const updateTask = () => {\n        const _tasks = allTasks.map(item => {\n            if (item.id === currentId) {\n                return {id: currentId, title: title, lastModified: new Date().toLocaleString(), completed: false};\n            }\n            return item;\n        })\n        setTasks(_tasks)\n        localStorage.setItem(\"tasks\", JSON.stringify(_tasks).toString());\n        handleClose()\n        reset()\n    }\n\n    const showTodoList = (isCompleted = false) => {\n        return allTasks === null ? [] : allTasks\n            .sort((a, b) => new Date(b.lastModified) - new Date(a.lastModified))\n            .filter(i => isCompleted === i.completed).map(item => {\n                return <Grid container key={item.id} style={{padding: 5}}>\n                    <Grid item xs={2} md={1}>\n                        <input\n                            name=\"selected\"\n                            type=\"radio\"\n                            checked={item.id === currentId}\n                            onChange={() => {\n                            }}\n                            onClick={() => markChecked(item.id)}/>\n                    </Grid>\n                    <Grid item xs={7} md={6}>\n                        <Typography\n                            title={item.title}\n                            style={{\n                                textAlign: 'left',\n                                overflow: 'hidden',\n                                textOverflow: 'ellipsis'\n                            }}>{item.title}</Typography>\n                    </Grid>\n                    <Grid item xs={3} md={2}>\n                        <Typography style={{fontSize: 13}}>{item.lastModified}</Typography>\n                    </Grid>\n                    <Grid item xs={12} md={3}>\n                        {\n                            item.id === currentId &&\n                            <div style={{display: 'flex', justifyContent: 'space-around', marginTop: -10}}>\n                                <Tooltip title=\"Delete\">\n                                    <IconButton color='primary' onClick={() => deleteTask(item.id)}>\n                                        <CloseIcon/>\n                                    </IconButton>\n                                </Tooltip>\n                                {\n                                    item.completed &&\n                                    <Tooltip title=\"Restore\">\n                                        <IconButton color='primary' onClick={() => changeTaskStatus(item.id)}>\n                                            <SettingsBackupRestoreIcon/>\n                                        </IconButton>\n                                    </Tooltip>\n                                }\n                                {\n                                    !item.completed &&\n                                    <React.Fragment>\n                                        <Tooltip title=\"Mark Completed\">\n                                            <IconButton color='primary'\n                                                        onClick={() => changeTaskStatus(item.id, TaskStatus.Completed)}>\n                                                <DoneIcon/>\n                                            </IconButton>\n                                        </Tooltip>\n                                        <Tooltip title=\"Edit\">\n                                            <IconButton color='primary' onClick={() => editTask(item)}>\n                                                <EditIcon/>\n                                            </IconButton>\n                                        </Tooltip>\n                                    </React.Fragment>\n                                }\n                            </div>\n                        }\n                    </Grid>\n                </Grid>\n            })\n    }\n\n    return (\n        <Container fixed style={{marginTop: 30}}>\n            <Grid>\n                <Grid item>\n                    <h2>Todo App</h2>\n                </Grid>\n                <Grid item style={{marginBottom: 15}}>\n                    <Typography color=\"primary\">My Tasks</Typography>\n                </Grid>\n                <Grid item>\n                    <Card style={{\n                        paddingTop: 10,\n                        paddingBottom: 10,\n                        display: 'block',\n                        maxHeight: 200,\n                        overflowY: 'auto'\n                    }}>\n                        {\n                            allTasks.filter(i => !i.completed).length !== 0 ?\n                                showTodoList() :\n                                <div>\n                                    <Typography>No pending tasks</Typography>\n                                </div>\n\n                        }\n                    </Card>\n                </Grid>\n                <Grid className='add-btn'>\n                    <Button onClick={() => setOpen(true)} color=\"primary\" variant='contained'\n                            endIcon={<ControlPointIcon/>}>Add Task</Button>\n                </Grid>\n\n                <Accordion>\n                    <AccordionSummary\n                        expandIcon={<ExpandMoreIcon/>}\n                    >\n                        <Typography>Completed Tasks</Typography>\n                    </AccordionSummary>\n                    <AccordionDetails>\n                        <Grid item md={12}>\n                            {\n                                showTodoList(true)\n                            }\n                        </Grid>\n                    </AccordionDetails>\n                </Accordion>\n            </Grid>\n            <Dialog open={open} onClose={handleClose}>\n                <DialogTitle>Add Task</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Eg. Prepare for exam\n                    </DialogContentText>\n                    <Input\n                        autoFocus\n                        id=\"name\"\n                        label=\"Title\"\n                        type=\"text\"\n                        fullWidth\n                        value={title}\n                        onChange={e => setTitle(e.target.value)}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={mode === Mode.Create ? addTask : updateTask} color=\"primary\"\n                            disabled={title === ''}>\n                        {mode === Mode.Create ? 'Add' : 'Update'}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Container>\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />\n,  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}